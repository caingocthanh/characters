{"version":3,"sources":["serviceWorker.js","Table.js","Form.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TableHeader","props","disValueName","disValueJob","staOrder","stateOrder","sOrder","sortOrder","symbolAsc","react_default","a","createElement","symbolDesc","onClick","sort","TableBody","rows","charactersData","map","row","index","key","name","job","removeCharacter","className","Table","_this$props","this","test","Table_TableHeader","namecolumn","Table_TableBody","React","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChanged","e","_e$target","target","value","setState","defineProperty","submitForm","handleSubmit","initialState","_this$state","type","onChange","App","characters","isAsc","nameCol","filter","character","i","handleSubmitForm","concat","toConsumableArray","handleTest","isOrder","arrOrg","orderArray","data","colName","col","toLocaleLowerCase","toString","b","jobA","jobB","Swap","_this2","src_Table","src_Form","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e932f74b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n//split content of class Table become TableHeader and TableBody=> reuse\r\nconst TableHeader=(props)=>{\r\n    const staOrder=props.stateOrder;//yes or no sort\r\n    const sOrder=props.sortOrder;//Asc or Desc\r\n    const symbolAsc=<span>▲</span>;\r\n    const symbolDesc=<span>▼</span>;\r\n    let disValueName, disValueJob;\r\n    if(staOrder){\r\n        if(staOrder==='name'){\r\n            disValueName= sOrder ? symbolDesc : symbolAsc ;\r\n        }\r\n        else{\r\n            disValueJob= sOrder ? symbolDesc : symbolAsc ;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th onClick={()=>props.sort('name')}>\r\n                    Name\r\n                    {disValueName}\r\n                </th>\r\n                <th onClick={()=>props.sort('job')}>\r\n                    Job\r\n                    {disValueJob}\r\n                </th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nconst TableBody=(props)=>{\r\n    const rows=props.charactersData.map((row, index) => {\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td onClick={()=>props.removeCharacter(index)}\r\n                className=\"button\"\r\n                >Delete</td>\r\n            </tr>\r\n        );\r\n    });\r\n    return (<tbody>{rows}</tbody>);\r\n}\r\n\r\nclass Table extends React.Component{\r\n    render(){\r\n        const {\r\n            charactersData,// same: charactersData=this.props.charactersData, ES6\r\n            removeCharacter,// same: removeCharacter=this.props.removeCharacter, ES6\r\n            test,\r\n            stateOrder,\r\n            sortOrder\r\n        }=this.props;\r\n        return(\r\n            <table>\r\n                <TableHeader \r\n                sort={(namecolumn)=>test(namecolumn)}\r\n                stateOrder={stateOrder}\r\n                sortOrder={sortOrder}\r\n                />\r\n                <TableBody \r\n                charactersData={charactersData}\r\n                removeCharacter={removeCharacter}\r\n                />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nclass Form extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.initialState={\r\n            name: '',\r\n            job: ''\r\n        }\r\n\r\n        this.state=this.initialState;\r\n    }\r\n\r\n    //Một dạng khai báo chung cần học hỏi\r\n    handleChanged=(e)=>{\r\n        const {name, value}=e.target;\r\n\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n\r\n    submitForm=()=>{\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render(){\r\n        const {name, job}=this.state;\r\n        return (\r\n            <form>\r\n                <label>Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChanged}/>\r\n                <label>job</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    value={job}\r\n                    onChange={this.handleChanged}/>\r\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm}/>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nclass App extends React.Component{\r\n    state={\r\n            characters:[\r\n                {name: 'Cái Ngọc Thanh',job: 'Programming'},\r\n                {name: 'Lê Thị Thúy Duy',job: 'Data Processing'},\r\n                {name: 'Phạm Công Minh',job: 'Accountant'},\r\n                {name: 'Trần Thị Phương Thảo',job: 'Model Fashion'}\r\n            ],\r\n            isAsc: true,\r\n            nameCol:''\r\n    }\r\n\r\n    removeCharacter=(index)=>{\r\n        const {characters}=this.state;//const characters=this.state.characters\r\n        this.setState({\r\n            characters:characters.filter((character, i) => {// Khi index=i=1, index=0,2,3 will have in new array. index=1 is not\r\n                return i !==index;\r\n            })\r\n        });\r\n    }\r\n\r\n    //Những cách viết kiểu này cũng cần nắm đặng nữa đọc code người khác nè\r\n    handleSubmitForm=(character)=>{ // handleSubmitForm(character){...}\r\n        this.setState(\r\n            {\r\n                //Spread syntax to understand\r\n                characters:[...this.state.characters,character]\r\n            }\r\n        );\r\n    }\r\n\r\n    handleTest=(namecolumn)=>{\r\n    //Nếu khai báo kiểu function(){..} lỗi underfined, \r\n    //đơn giản tại vì nó là phương thức trong class\r\n    //phương thức trong class thì mặc định không được liên kết mà phải thông qua bind ở constructor\r\n        const isOrder=this.state.isAsc;\r\n        const arrOrg=this.state.characters;\r\n        const orderArray=namecolumn ? Swap(arrOrg,isOrder,namecolumn) : null;\r\n    \r\n        this.setState({\r\n            characters: orderArray,\r\n            isAsc: !this.state.isAsc,\r\n            nameCol:namecolumn\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const name=\"Guest!\";\r\n        let {characters}=this.state;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Hello, {name} Welcome to myApp React</h1>\r\n                <Table \r\n                charactersData={characters}\r\n                removeCharacter={this.removeCharacter}\r\n                test={(namecolumn)=>this.handleTest(namecolumn)}\r\n                stateOrder={this.state.nameCol}\r\n                sortOrder={this.state.isAsc}\r\n                />\r\n\r\n                <Form handleSubmit={this.handleSubmitForm}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Swap(data, isOrder, colName){\r\n    const col=colName.toLocaleLowerCase().toString();\r\n    if(isOrder){\r\n        return data.sort(\r\n            function(a, b){\r\n                const jobA=(col==='name') \r\n                ? a.name.toLocaleLowerCase() \r\n                : a.job.toLocaleLowerCase();\r\n                const jobB=(col==='name') \r\n                ? b.name.toLocaleLowerCase()\r\n                : b.job.toLocaleLowerCase();\r\n\r\n                if(jobA < jobB){\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n        );\r\n    }\r\n    else{\r\n        return data.sort(\r\n            function(a, b){\r\n                const jobA=(col==='name') \r\n                ? a.name.toLocaleLowerCase() \r\n                : a.job.toLocaleLowerCase();\r\n                const jobB=(col==='name') \r\n                ? b.name.toLocaleLowerCase()\r\n                : b.job.toLocaleLowerCase();\r\n\r\n                if(jobA > jobB){\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n        );\r\n    }\r\n}\r\nexport default App;","\n/**\n * import React, {Component} from 'react';\n * */\nimport React from 'react'; //import default when create class 'extends React.Component'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n/************************************************************************************************ */\nimport App from './App';\n//import Api from './Api';\n/************************************************************************************************ */\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}